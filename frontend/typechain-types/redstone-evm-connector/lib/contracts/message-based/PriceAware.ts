/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface PriceAwareInterface extends utils.Interface {
  functions: {
    "getMaxBlockTimestampDelay()": FunctionFragment;
    "getMaxDataTimestampDelay()": FunctionFragment;
    "isSignerAuthorized(address)": FunctionFragment;
    "isTimestampValid(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMaxBlockTimestampDelay"
      | "getMaxDataTimestampDelay"
      | "isSignerAuthorized"
      | "isTimestampValid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMaxBlockTimestampDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDataTimestampDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSignerAuthorized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTimestampValid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMaxBlockTimestampDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDataTimestampDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSignerAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTimestampValid",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PriceAware extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceAwareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    isSignerAuthorized(
      _receviedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTimestampValid(
      _receivedTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

  isSignerAuthorized(
    _receviedSigner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTimestampValid(
    _receivedTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    isSignerAuthorized(
      _receviedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTimestampValid(
      _receivedTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getMaxBlockTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDataTimestampDelay(overrides?: CallOverrides): Promise<BigNumber>;

    isSignerAuthorized(
      _receviedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTimestampValid(
      _receivedTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMaxBlockTimestampDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxDataTimestampDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignerAuthorized(
      _receviedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTimestampValid(
      _receivedTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
